import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.bean.Roles;

public class DBTools {
	private static Connection conn;
	static{
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private static Connection getConnection(){
		try {
			conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","lyl","123456");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}
	
	public static void CloseConnection(){
		if(conn!=null){
			try {
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public static <T> String createInsertSql(Class<T> c,List<String> columns){
		StringBuffer bf=new StringBuffer();
		bf.append("insert into ");
		bf.append(c.getSimpleName());
		bf.append("(");
		for(String str:columns){
			bf.append(str);
			bf.append(",");
		}
		bf.delete(bf.length()-1,bf.length());
		bf.append(") values(");
		for(String str:columns){
			bf.append("?,");
		}
		bf.delete(bf.length()-1,bf.length());
		bf.append(")");
		return bf.toString();
	}
	
	public static <T> int InsertObject(T t){
		int i=0;
		int index=1;
		List<String> columns=new ArrayList<String>();
		Class c=t.getClass();
		for(Field f:c.getDeclaredFields()){
			columns.add(f.getName());
		}
		String sql=createInsertSql(c,columns);
		System.out.println(sql);
		try {
			PreparedStatement pst=getConnection().prepareStatement(sql);
			for(String string:columns){
				for(Method m:c.getMethods()){
					if(m.getName().equalsIgnoreCase("get"+string)){
						pst.setObject(index, m.invoke(t, null));
						index++;
					}
				}
			}
			i=pst.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return  i;
		
	}
}
