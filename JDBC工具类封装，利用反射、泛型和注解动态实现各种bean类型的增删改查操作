
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.bean.Roles;

public class DBTools {
	private static Context con=null;
	private static DataSource ds=null;
	private static Connection conn;
	static{
		try {
			con=new InitialContext();
			ds=(DataSource) con.lookup("java:comp/env/aaa");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static Connection getConnection(){
		try {
			conn=ds.getConnection();
			return conn;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static void CloseConnection(){
		if(conn!=null){
			try {
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public static <T> String createInsertSql(Class<T> c,List<String> columns){
		StringBuffer bf=new StringBuffer();
		bf.append("insert into ");
		AnnotationTools at=c.getAnnotation(AnnotationTools.class);
		if(at==null)
			bf.append(c.getSimpleName());
		else
			bf.append(at.name());
		bf.append("(");
		for(String str:columns){
			bf.append(str);
			bf.append(",");
		}
		bf.delete(bf.length()-1,bf.length());
		bf.append(") values(");
		for(String str:columns){
			bf.append("?,");
		}
		bf.delete(bf.length()-1,bf.length());
		bf.append(")");
		return bf.toString();
	}
	public static <T> String createDeleteSql(Class<T> c,List<String> columns){
		StringBuffer bf=new StringBuffer();
		bf.append("delete from ");
		bf.append(c.getSimpleName());
		bf.append(" where ");
		bf.append(columns.get(0));
		bf.append("=?");
		return bf.toString();
		
	}
	public static <T> String createUpdateSql(Class<T> c,List<String> columns){
		StringBuffer bf=new StringBuffer();
		bf.append("update ");
		bf.append(c.getSimpleName());
		bf.append(" set ");
		for(String string:columns){
			bf.append(string+"=?,");
		}
		bf.delete(bf.length()-1, bf.length());
		bf.append(" where ");
		bf.append(columns.get(0));
		bf.append("=?");
		return bf.toString();
	}
	public static <T> String createSelectSql(Class<T> c,List<String> columns){
		StringBuffer bf=new StringBuffer();
		bf.append("select * from ");
		bf.append(c.getSimpleName());
		return bf.toString();
	}
	public static <T> ResultSet SelectObject(T t){
		ResultSet rs=null;
		List<String> columns=new ArrayList<String>();
		Class c=t.getClass();
		for(Field f:c.getDeclaredFields()){
			columns.add(f.getName());
		}
		String sql=createSelectSql(c, columns);
		System.out.println(sql);
		try {
			PreparedStatement pst=getConnection().prepareStatement(sql);
			rs=pst.executeQuery();
			return rs;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rs;
	}
	public static <T> int UpdateObject(T t){
		int i=0;
		int index=1;
		List<String> columns=new ArrayList<String>();
		Class c=t.getClass();
		for(Field f:c.getDeclaredFields()){
			columns.add(f.getName());
		}
		String sql=createUpdateSql(c,columns);
		System.out.println(sql);
		try {
			PreparedStatement pst=getConnection().prepareStatement(sql);
			for(String string:columns){
				for(Method m:c.getMethods()){
					if(m.getName().equalsIgnoreCase("get"+string)){
						pst.setObject(index, m.invoke(t, null));
						index++;
					}
				}
			}
			for(Method m:c.getMethods()){
				if(m.getName().equalsIgnoreCase("get"+columns.get(0))){
					pst.setObject(index, m.invoke(t, null));
				}
			}
			i=pst.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return i;
	}
	public static<T> int DeleteObject(T t){
		int i=0;
		List<String> columns=new ArrayList<String>();
		Class c=t.getClass();
		for(Field f:c.getDeclaredFields()){
			columns.add(f.getName());
		}
		String sql=createDeleteSql(c,columns);
		System.out.println(sql);
		try {
			PreparedStatement pst=getConnection().prepareStatement(sql);
			for(Method m:c.getMethods()){
				if(m.getName().equalsIgnoreCase("get"+columns.get(0))){
					pst.setObject(1, m.invoke(t, null));
				}
			}
			i=pst.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return i;
	}
	public static <T> int InsertObject(T t){
		int i=0;
		int index=1;
		List<String> columns=new ArrayList<String>();
		Class c=t.getClass();
		AnnotationTools at=(AnnotationTools) c.getAnnotation(AnnotationTools.class);	
		for(Field f:c.getDeclaredFields()){
			columns.add(f.getName());
			if(at!=null&&!at.isCreate()){
				columns.remove(f.getName());
			}
		}
		String sql=createInsertSql(c,columns);
		System.out.println(sql);
		try {
			PreparedStatement pst=getConnection().prepareStatement(sql);
			for(String string:columns){
				for(Method m:c.getMethods()){
					if(m.getName().equalsIgnoreCase("get"+string)){
						pst.setObject(index, m.invoke(t, null));
						index++;
					}
				}
			}
			//i=pst.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return  i;
		
	}
}
